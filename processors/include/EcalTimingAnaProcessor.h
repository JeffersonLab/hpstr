#ifndef __ECALTIMING_ANAPROCESSOR_H__
#define __ECALTIMING_ANAPROCESSOR_H__

//HPSTR
#include "HpsEvent.h"
#include "TSData.h"
#include "VTPData.h"
#include "CalCluster.h"
#include "Track.h"
#include "Vertex.h"
#include "HistoManager.h"
#include "EcalTimingAnaHistos.h"


//ROOT
#include "Processor.h"
#include "TFile.h"
#include "TTree.h"
#include "TRefArray.h"
#include "TBranch.h"
#include "TVector3.h"
#include "TLorentzVector.h"

//C++
#include <memory>

class EcalTimingAnaProcessor : public Processor {

public:
	EcalTimingAnaProcessor(const std::string& name, Process& process);
    ~EcalTimingAnaProcessor();
    virtual bool process(IEvent* ievent);

    virtual void initialize(TTree* tree);

    virtual void finalize();

    virtual void configure(const ParameterSet& parameters);

private:
    //Containers to hold histogrammer info
    EcalTimingAnaHistos* histos{nullptr};
    std::string  histCfgFilename_;

    //TODO Change this to be held from HPSEvent
    TTree* tree_{nullptr};
    TBranch* bvtpData_{nullptr};
    TBranch* btsData_{nullptr};
    TBranch* btrks_{nullptr};
    TBranch* becalClusters_{nullptr};
    TBranch* bvtxs_{nullptr};

    VTPData* vtpData_{};
    TSData* tsData_{};
    std::vector<Track*>  * trks_{};
    std::vector<CalCluster*> * ecalClusters_{};
    std::vector<Vertex*> * vtxs_{};

    std::string anaName_{"ecalTimingAna"};
    std::string vtpColl_{"VTPBank"};
    std::string tsColl_{"TSBank"};
    std::string trkColl_{"KalmanFullTracks"};
    std::string ecalClusColl_{"EcalClustersCorr"};
    std::string vtxColl_{"Vertices"};

    //Debug level
    int debug_{0};

    double beamE_{4.55};

    TH1D* histDT;
    TH1D* histDTESumMinCut;
    TH1D* histDTOnePosNegTrack;

    TH1D* histDTCorr;
    TH1D* histDTESumMinCutCorr;
    TH1D* histDTOnePosNegTrackCorr;

    TH1D* histDTESumMinCutCorrGlobal;

    TH2D* histDTMean;
    TH2D* histDTCount;
    std::map< std::pair<int, int>, TH1D* > histMapDTMean;
    std::map< std::pair<int, int>, int > dtCountMap;

    TH2D* histDTMeanCorr;
    TH2D* histDTCountCorr;
    std::map< std::pair<int, int>, TH1D* > histMapDTMeanCorr;
    std::map< std::pair<int, int>, int > dtCountMapCorr;

    TF1 *ecalClusterTimeCutTop;
    TF1 *ecalClusterTimeCutBot;
    TH2D *histEcalClusterTimeCorection;
    const double ecalClusterTimeCorrectionArray[47][11] = {
			-1.2654, -1.45791, -1.19141, -0.755939, -1.93252, 0, -0.581852, 0.668742, -0.166712, -0.0185152, -0.318665,
			-1.37084, -1.18393, -1.17317, -1.21501, -1.7544, 0, -0.616176, -0.345791, -0.0369239, -0.502547, -0.485728,
			-1.16468, -1.33315, -1.24254, -0.887337, -0.878836, 0, -0.696345, -0.424531, -0.12665, -0.273283, -0.0961304,
			-1.39742, -1.36479, -0.872532, -1.04125, -1.09271, 0, -0.533375, -0.449079, -0.0776943, -0.218848, 0.037779,
			-1.27711, -1.11651, -1.11612, -1.16043, -1.36005, 0, -0.217015, -0.143783, -0.113777, -0.00065967, -0.105675,
			-1.44944, -0.965083, -1.01181, -0.989056, -3.79178, 0, -0.413243, 0.262547, 0.00665395, 0.354421, -0.0350502,
			-0.937815, -1.13427, -1.07517, -0.972523, -1.06032, 0, -0.0596672, -0.243511, -0.0861002, 0.00156225, 0.166776,
			3.11809, -0.686903, -1.07051, -1.06204, -0.905249, 0, -0.163141, 0.194864, 0.273725, 0.157494, -0.0822571,
			-0.999143, -0.569587, -0.803399, 0, -0.743729, 0, 0.152925, 0.087242, -0.161716, 0.116557, -0.0536868,
			-1.16775, -1.05216, -1.03498, -0.668722, -0.936245, 0, -0.0280611, 0.206097, 0.244548, 0.295182, 0.0777416,
			-1.03187, -0.785148, -0.697296, -0.570353, -0.631521, 0, -0.226584, 0.29199, 0.262538, 0.200138, 0.216983,
			-0.790111, -0.688373, -0.529684, -0.638347, -0.876052, 0, 0.183819, 0.418083, 0.392714, -0.0843662, 0.000466347,
			-0.840409, -0.639772, -0.689313, -0.423032, -0.582716, 0, 0.301546, 0.441715, 0.439967, 0.191556, 0.550977,
			-0.406977, -0.629893, -0.792436, -0.488633, 0, 0, 0, 0.307558, 0.518058, 0.144437, 0.366125,
			-0.365956, -0.374507, -0.606815, -0.406301, 0, 0, 0, 0, 0.495067, 0.579337, 0.42021,
			-0.0329475, -0.818933, -0.189608, -0.09236, 0, 0, 0, 0.462687, 0.598244, 0.767371, 0.616263,
			-1.54499, 0.469385, -0.720808, 0, 0, 0, 0, 0.305716, 0.560361, 0.655689, 0,
			-0.106791, -0.00349299, -2.5075, -0.19502, 0, 0, 0, 0.209463, 0.0646811, -0.973248, -0.54015,
			0.105713, -0.944213, 1.33411, -0.426569, 0, 0, 0, 0.49799, 0.222785, -0.673246, -1.39084,
			-0.425514, -1.00047, -0.230359, -0.28117, 0, 0, 0, 0.386442, 0.631477, 1.18608, 1.22331,
			0, -1.00988, -1.42874, -1.11542, 0, 0, 0, -0.326067, -1.14772, -0.487498, 0,
			-0.960506, 0, -0.645569, -1.16917, 0, 0, 0, 0.316473, 0.0942545, 0, 0.430885,
			0, -0.534506, 1.19315, -0.442845, 0.412901, 0, 0, 0.412928, -1.3962, -0.366943, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, -0.716644, 0, -0.343519, -0.844974, 0, -0.495672, 0.218677, 0.136885, 4.85808, -1.45676,
			-1.76101, -1.45455, -2.89807, -0.266544, -0.324021, 0, 0.608443, 0.381501, -0.381664, 0.0478439, -1.17987,
			-1.1409, 2.64291, -1.15673, -0.0467003, -1.06572, 0, 0.31905, 1.07081, 0.453909, 0, 0,
			0, 0, -0.678642, 0, 1.68277, 0, -0.0924486, 0, 0.684258, -0.149473, 0,
			-0.283954, -0.651822, -0.403599, 0, -0.264737, 0, 0.642041, 0.908159, 0.957494, 0.528114, 0.499097,
			-0.313448, -0.246681, -0.53526, 0.00674915, 0.0742614, 0, 0.651533, 1.0332, 0.568381, 0.585896, 0.227017,
			-0.641844, -0.645072, 0, -0.2169, 0.0893606, 0, 0.945815, 0.945224, 0.583381, -0.0441835, 0.541923,
			-0.629882, -0.361903, -0.431934, -0.0944852, 0.27767, 0, 0.982588, 0.834379, 0.329854, 0.414169, -0.118297,
			-0.168994, -0.206419, -0.481913, -0.0524441, -0.0932047, 0, 0.748072, 0.76877, 0.708131, 0.404209, 0.122887,
			-0.59771, -0.633246, -0.26603, -0.167043, 0.0273234, 0, 1.18497, 0.590414, 0.703169, 0.592755, 0.362839,
			-0.644424, -0.70056, -0.360879, -0.1612, 0.0202259, 0, 0.900999, 0.8825, 0.505324, 0.351621, 0.428158,
			-0.431427, -0.238385, -0.151385, -0.105329, -0.149231, 0, 0.991825, 0.767373, 0.79998, 0.714007, 0.381896,
			-0.542148, -0.429393, -0.465989, -0.178522, -0.159392, 0, 0.724592, 0.710528, 0.767885, 0.562602, 0.247841,
			-1.042, -0.664757, -0.356646, -0.085702, -0.224513, 0, 0.5617, 0.638633, 0.500992, 0.648638, 0.554606,
			-0.863765, -0.76745, -0.587468, -0.442486, -0.180115, 0, 0.791817, 0.609363, 0.670426, 0.384395, 1.18912,
			-0.604001, -0.592731, -0.449993, -0.592017, -0.169552, 0, 1.02186, 0.128033, 0.534161, 0.246157, 0.209627,
			-0.308322, -0.718901, -0.697069, -0.494244, -0.0582388, 0, 0.564575, 0.910578, 0.543207, 0.305224, -0.102556,
			-0.567301, -0.608664, -0.593327, -0.501578, -0.0171803, 0, 0.719277, -0.079718, 0.307377, 0.327405, 0.0459938,
			-0.960953, -0.690978, -0.415075, -0.52823, -0.0557228, 0, -0.210924, 0.637207, 0.461332, 0.335091, -0.566422,
			-0.754275, -0.449141, -0.439461, -0.57341, 0.0830506, 0, -0.450015, -0.0507266, 0.415633, 0.368216, 0.670124,
			-0.845524, -0.904484, -1.11579, -2.73535, -0.193464, 0, -1.54932, 0, 0.594069, 0.078228, 0.514837,
			0, -0.604403, -0.995271, 0.433632, -1.40042, 0, -0.226487, 0.411107, 1.9034, 0.523184, -0.162319,
			0, -0.765726, -0.791466, 0, 0.549316, 0, 0.0293741, 0.0453911, 0.0610909, 0.640575, 0.308315
    };
};

#endif
